// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Lucifer07/e-wallet/entity"
	mock "github.com/stretchr/testify/mock"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// CreateWallet provides a mock function with given fields: ctx, userId
func (_m *WalletRepository) CreateWallet(ctx context.Context, userId int) (*entity.Wallet, error) {
	ret := _m.Called(ctx, userId)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Wallet); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPatnerWallet provides a mock function with given fields: ctx, walletNumber
func (_m *WalletRepository) GetPatnerWallet(ctx context.Context, walletNumber string) (*entity.Wallet, error) {
	ret := _m.Called(ctx, walletNumber)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Wallet); ok {
		r0 = rf(ctx, walletNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, walletNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletData provides a mock function with given fields: ctx, userId
func (_m *WalletRepository) GetWalletData(ctx context.Context, userId int) (*entity.Wallet, error) {
	ret := _m.Called(ctx, userId)

	var r0 *entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Wallet); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletId provides a mock function with given fields: ctx, userId
func (_m *WalletRepository) GetWalletId(ctx context.Context, userId int) (*int, error) {
	ret := _m.Called(ctx, userId)

	var r0 *int
	if rf, ok := ret.Get(0).(func(context.Context, int) *int); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBalance provides a mock function with given fields: ctx, wallet
func (_m *WalletRepository) UpdateBalance(ctx context.Context, wallet entity.Wallet) error {
	ret := _m.Called(ctx, wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Wallet) error); ok {
		r0 = rf(ctx, wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
