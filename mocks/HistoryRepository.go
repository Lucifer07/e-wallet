// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Lucifer07/e-wallet/entity"
	mock "github.com/stretchr/testify/mock"
)

// HistoryRepository is an autogenerated mock type for the HistoryRepository type
type HistoryRepository struct {
	mock.Mock
}

// CreateHistory provides a mock function with given fields: ctx, history
func (_m *HistoryRepository) CreateHistory(ctx context.Context, history entity.HistoryTransaction) (*entity.HistoryTransaction, error) {
	ret := _m.Called(ctx, history)

	var r0 *entity.HistoryTransaction
	if rf, ok := ret.Get(0).(func(context.Context, entity.HistoryTransaction) *entity.HistoryTransaction); ok {
		r0 = rf(ctx, history)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HistoryTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.HistoryTransaction) error); ok {
		r1 = rf(ctx, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletNumbers provides a mock function with given fields: ctx, historyId
func (_m *HistoryRepository) GetWalletNumbers(ctx context.Context, historyId int) (*[]entity.Wallet, error) {
	ret := _m.Called(ctx, historyId)

	var r0 *[]entity.Wallet
	if rf, ok := ret.Get(0).(func(context.Context, int) *[]entity.Wallet); ok {
		r0 = rf(ctx, historyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Wallet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, historyId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MyTransactions provides a mock function with given fields: ctx, walletId, params
func (_m *HistoryRepository) MyTransactions(ctx context.Context, walletId int, params map[string]string) (*[]entity.HistoryTransaction, error) {
	ret := _m.Called(ctx, walletId, params)

	var r0 *[]entity.HistoryTransaction
	if rf, ok := ret.Get(0).(func(context.Context, int, map[string]string) *[]entity.HistoryTransaction); ok {
		r0 = rf(ctx, walletId, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.HistoryTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, map[string]string) error); ok {
		r1 = rf(ctx, walletId, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
