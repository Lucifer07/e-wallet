// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Lucifer07/e-wallet/entity"
	mock "github.com/stretchr/testify/mock"
)

// PasswordTokenRepository is an autogenerated mock type for the PasswordTokenRepository type
type PasswordTokenRepository struct {
	mock.Mock
}

// CheckToken provides a mock function with given fields: ctx, userId
func (_m *PasswordTokenRepository) CheckToken(ctx context.Context, userId int) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateToken provides a mock function with given fields: ctx, id
func (_m *PasswordTokenRepository) CreateToken(ctx context.Context, id int) (*entity.PasswordToken, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.PasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.PasswordToken); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields: ctx, userId
func (_m *PasswordTokenRepository) DeleteToken(ctx context.Context, userId int) error {
	ret := _m.Called(ctx, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateToken provides a mock function with given fields: ctx, token
func (_m *PasswordTokenRepository) ValidateToken(ctx context.Context, token string) (*entity.PasswordToken, error) {
	ret := _m.Called(ctx, token)

	var r0 *entity.PasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.PasswordToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
