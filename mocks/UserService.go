// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Lucifer07/e-wallet/dto"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// GetSelf provides a mock function with given fields: ctx
func (_m *UserService) GetSelf(ctx context.Context) (*dto.UserWalletResponse, error) {
	ret := _m.Called(ctx)

	var r0 *dto.UserWalletResponse
	if rf, ok := ret.Get(0).(func(context.Context) *dto.UserWalletResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.UserWalletResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, loginData
func (_m *UserService) Login(ctx context.Context, loginData dto.Login) (*string, error) {
	ret := _m.Called(ctx, loginData)

	var r0 *string
	if rf, ok := ret.Get(0).(func(context.Context, dto.Login) *string); ok {
		r0 = rf(ctx, loginData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.Login) error); ok {
		r1 = rf(ctx, loginData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, registerData
func (_m *UserService) Register(ctx context.Context, registerData dto.RegisterRequest) (*dto.RegisterResponse, error) {
	ret := _m.Called(ctx, registerData)

	var r0 *dto.RegisterResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequest) *dto.RegisterResponse); ok {
		r0 = rf(ctx, registerData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.RegisterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.RegisterRequest) error); ok {
		r1 = rf(ctx, registerData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
