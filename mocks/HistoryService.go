// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/Lucifer07/e-wallet/dto"
	entity "github.com/Lucifer07/e-wallet/entity"

	mock "github.com/stretchr/testify/mock"
)

// HistoryService is an autogenerated mock type for the HistoryService type
type HistoryService struct {
	mock.Mock
}

// MyTransactions provides a mock function with given fields: ctx, params
func (_m *HistoryService) MyTransactions(ctx context.Context, params map[string]string) (*[]entity.HistoryTransaction, error) {
	ret := _m.Called(ctx, params)

	var r0 *[]entity.HistoryTransaction
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string) *[]entity.HistoryTransaction); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.HistoryTransaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupBank provides a mock function with given fields: ctx, dataTopup
func (_m *HistoryService) TopupBank(ctx context.Context, dataTopup dto.TopupBankRequest) (*dto.TopupBankResponse, error) {
	ret := _m.Called(ctx, dataTopup)

	var r0 *dto.TopupBankResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.TopupBankRequest) *dto.TopupBankResponse); ok {
		r0 = rf(ctx, dataTopup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopupBankResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.TopupBankRequest) error); ok {
		r1 = rf(ctx, dataTopup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupCreditCard provides a mock function with given fields: ctx, dataTopup
func (_m *HistoryService) TopupCreditCard(ctx context.Context, dataTopup dto.TopupCreditCardRequest) (*dto.TopupCreditCardResponse, error) {
	ret := _m.Called(ctx, dataTopup)

	var r0 *dto.TopupCreditCardResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.TopupCreditCardRequest) *dto.TopupCreditCardResponse); ok {
		r0 = rf(ctx, dataTopup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopupCreditCardResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.TopupCreditCardRequest) error); ok {
		r1 = rf(ctx, dataTopup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TopupPayLater provides a mock function with given fields: ctx, dataTopup
func (_m *HistoryService) TopupPayLater(ctx context.Context, dataTopup dto.TopupPaylaterRequest) (*dto.TopupPaylaterResponse, error) {
	ret := _m.Called(ctx, dataTopup)

	var r0 *dto.TopupPaylaterResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.TopupPaylaterRequest) *dto.TopupPaylaterResponse); ok {
		r0 = rf(ctx, dataTopup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.TopupPaylaterResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.TopupPaylaterRequest) error); ok {
		r1 = rf(ctx, dataTopup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transfer provides a mock function with given fields: ctx, walletTransaction
func (_m *HistoryService) Transfer(ctx context.Context, walletTransaction dto.TransferRequest) (*dto.WalletTransactionResponse, error) {
	ret := _m.Called(ctx, walletTransaction)

	var r0 *dto.WalletTransactionResponse
	if rf, ok := ret.Get(0).(func(context.Context, dto.TransferRequest) *dto.WalletTransactionResponse); ok {
		r0 = rf(ctx, walletTransaction)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.WalletTransactionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.TransferRequest) error); ok {
		r1 = rf(ctx, walletTransaction)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
